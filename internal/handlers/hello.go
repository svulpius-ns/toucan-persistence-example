/*
Copyright Â© 2019-2020 Netskope
*/

// TODO :: Rename file/struct/interface/methods to match your service

package handlers

import (
	"context"

	"github.com/netskope/go-kestrel/pkg/log"

	apis "github.com/netskope/piratetreasure/api/proto/piratetreasure"
	"github.com/netskope/piratetreasure/internal/persistence"
)

var treasureLogger = log.NewLogger("TreasureServiceHandler")

//TreasureServiceHandler wraps the HelloWorldServiceServer generated by protoc
//and adds handler specific needs, when applicable
type TreasureServiceHandler interface {
	apis.TreasureServiceServer
}

//treasure implements TreasureServiceHandler
type treasure struct {
	apis.UnimplementedTreasureServiceServer
	repo persistence.TreasureRepository
}

// NewTreasureServiceHandler creates a new TreasureServiceHandler
func NewTreasureServiceHandler(ctx context.Context) TreasureServiceHandler {
	h := treasure{}

	h.repo = *persistence.NewSqliteRepository("sqlite-database.db")
	treasureLogger.Info("Starting ...")
	return &h
}

// GetTreasure returns the treasure details for a specific treasure
func (h *treasure) GetTreasure(ctx context.Context, t *apis.GetTreasureRequest) (*apis.Treasure, error) {
	treasure := h.repo.GetTreasureByID(t.TreasureId)
	return &apis.Treasure{
		TreasureId:  treasure.TreasureID,
		Type:        treasure.Type,
		Description: treasure.Description,
	}, nil
}

// ListTreasure returns the treasure details for a specific treasure
func (h *treasure) ListTreasure(ctx context.Context, t *apis.ListTreasureRequest) (*apis.ListTreasureResponse, error) {
	params := make(map[string]string, 0)
	if len(t.Type) != 0 {
		params["type"] = t.Type
	}
	treasureList := make([]*apis.Treasure, 0)
	for _, treasure := range h.repo.ListTreasure(params) {
		treasureList = append(treasureList, &apis.Treasure{
			TreasureId:  treasure.TreasureID,
			Type:        treasure.Type,
			Description: treasure.Description,
		})

	}
	return &apis.ListTreasureResponse{
		Treasure: treasureList,
	}, nil
}
