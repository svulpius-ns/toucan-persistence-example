// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package piratetreasure

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TreasureServiceClient is the client API for TreasureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreasureServiceClient interface {
	// return "Hello World"
	ListTreasure(ctx context.Context, in *ListTreasureRequest, opts ...grpc.CallOption) (*ListTreasureResponse, error)
	GetTreasure(ctx context.Context, in *GetTreasureRequest, opts ...grpc.CallOption) (*Treasure, error)
}

type treasureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreasureServiceClient(cc grpc.ClientConnInterface) TreasureServiceClient {
	return &treasureServiceClient{cc}
}

func (c *treasureServiceClient) ListTreasure(ctx context.Context, in *ListTreasureRequest, opts ...grpc.CallOption) (*ListTreasureResponse, error) {
	out := new(ListTreasureResponse)
	err := c.cc.Invoke(ctx, "/api.proto.piratetreasure.TreasureService/ListTreasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasureServiceClient) GetTreasure(ctx context.Context, in *GetTreasureRequest, opts ...grpc.CallOption) (*Treasure, error) {
	out := new(Treasure)
	err := c.cc.Invoke(ctx, "/api.proto.piratetreasure.TreasureService/GetTreasure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreasureServiceServer is the server API for TreasureService service.
// All implementations must embed UnimplementedTreasureServiceServer
// for forward compatibility
type TreasureServiceServer interface {
	// return "Hello World"
	ListTreasure(context.Context, *ListTreasureRequest) (*ListTreasureResponse, error)
	GetTreasure(context.Context, *GetTreasureRequest) (*Treasure, error)
	mustEmbedUnimplementedTreasureServiceServer()
}

// UnimplementedTreasureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreasureServiceServer struct {
}

func (UnimplementedTreasureServiceServer) ListTreasure(context.Context, *ListTreasureRequest) (*ListTreasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTreasure not implemented")
}
func (UnimplementedTreasureServiceServer) GetTreasure(context.Context, *GetTreasureRequest) (*Treasure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreasure not implemented")
}
func (UnimplementedTreasureServiceServer) mustEmbedUnimplementedTreasureServiceServer() {}

// UnsafeTreasureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreasureServiceServer will
// result in compilation errors.
type UnsafeTreasureServiceServer interface {
	mustEmbedUnimplementedTreasureServiceServer()
}

func RegisterTreasureServiceServer(s grpc.ServiceRegistrar, srv TreasureServiceServer) {
	s.RegisterService(&TreasureService_ServiceDesc, srv)
}

func _TreasureService_ListTreasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasureServiceServer).ListTreasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.piratetreasure.TreasureService/ListTreasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasureServiceServer).ListTreasure(ctx, req.(*ListTreasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasureService_GetTreasure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasureServiceServer).GetTreasure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.piratetreasure.TreasureService/GetTreasure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasureServiceServer).GetTreasure(ctx, req.(*GetTreasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreasureService_ServiceDesc is the grpc.ServiceDesc for TreasureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreasureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.piratetreasure.TreasureService",
	HandlerType: (*TreasureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTreasure",
			Handler:    _TreasureService_ListTreasure_Handler,
		},
		{
			MethodName: "GetTreasure",
			Handler:    _TreasureService_GetTreasure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/piratetreasure/piratetreasure.proto",
}
